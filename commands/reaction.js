const axios = require('axios')
const { fetchJson, cmd, GIFBufferToVideoBuffer, sck } = require('../lib');
//---------------------------------------------------------------------------
cmd({
    pattern: "bite",
    alias: ['–∫—É—Å–∞—Ç—å', '–∫—É—Å–∞—é', '—É–∫—É—Å–∏—Ç—å'],
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    desc: "—É–∫—É—Å–∏—Ç—å",
    priceMsg: 80,
    noPrefix: true,
    react: "üòä"

}, async ({ Void, citel, users }) => {
    var bite = await fetchJson(`https://api.waifu.pics/sfw/bite`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");
    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.bite()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.biteSelf()}`;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
});

cmd({
    pattern: "pat",
    alias: ["–ø–æ–≥–ª–∞–¥–∏—Ç—å", "–≥–ª–∞–¥–∏—Ç—å"],
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    desc: "–≥–ª–∞–¥–∏—Ç—å",
    priceMsg: 80,
    react: "üòá",
}, async ({ Void, citel, users }) => {
    var bite = await fetchJson(`https://api.waifu.pics/sfw/pat`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");
    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.pat()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.patSelf()}`;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
});

cmd({
    pattern: "kiss",
    alias: ["—Ü–µ–ª–æ–≤–∞—Ç—å", "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å"],
    desc: "—Ü–µ–ª–æ–≤–∞—Ç—å",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 80,
    react: "üòò",
}, async ({ Void, citel, users }) => {
    var bite = await fetchJson(`https://api.waifu.pics/sfw/kiss`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");
    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.kiss()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.kissSelf()}`;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
});

cmd({
    pattern: "kill",
    alias: ["—É–±–∏—Ç—å", "—É–±–∏–ª"],
    desc: "—É–±–∏—Ç—å",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    nsfw: true,
    priceMsg: 80,
    react: "üòà",
}, async ({ Void, citel, users }) => {
    const checkNSFW = await sck.findOne({ id: citel.chat });
    if (citel.isGroup && !checkNSFW.nsfw) return citel.reply(replies.nsfwDisabled());

    var bite = await fetchJson(`https://api.waifu.pics/sfw/kill`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");
    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.kill()} @${users.split("@")[0]}. `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.killSelf()}. `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
});

cmd({
    pattern: "happy",
    alias: ["–ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è", "—Ä–∞–¥—É—é—Å—å", "—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è", "—Ä–∞–¥–∞", "—Ä–∞–¥"],
    desc: "—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 80,
    react: "üòé",
}, async ({ Void, citel, users }) => {
    var bite = await fetchJson(`https://api.waifu.pics/sfw/dance`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");

    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.happy()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.happySelf()} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
});

cmd({
    pattern: "dance",
    alias: ['—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å', '–ø–æ—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å'],
    desc: "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 80,
    react: "üíÄ",
}, async ({ Void, citel, users }) => {
    var bite = await fetchJson(`https://api.waifu.pics/sfw/dance`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");

    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.dance()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.danceSelf()} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
});

cmd({
    pattern: "hug",
    alias: ["–æ–±–Ω—è—Ç—å"],
    desc: "–æ–±–Ω–∏–º–∞—Ç—å",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 80,
    react: "ü§ó",
}, async ({ Void, citel, users }) => {
    var bite = await fetchJson(`https://api.waifu.pics/sfw/cuddle`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");
    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.hug()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.hugSelf()} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
});
//----------------------------------------------------------------------------------
cmd({
    pattern: "blowjob",
    alias: ["–º–∏–Ω–µ—Ç", "."],
    desc: "–º–∏–Ω–µ—Ç",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 120,
    nsfw: true,
    react: "ü•∞",
}, async ({ Void, citel, users }) => {
    const checkNSFW = await sck.findOne({ id: citel.chat });
    if (citel.isGroup && !checkNSFW.nsfw) return citel.reply(replies.nsfwDisabled());

    var bite = await fetchJson(`https://api.waifu.pics/nsfw/blowjob`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");

    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.minet()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.minetSelf()}`;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
})
//------------------------------------------------------------------------------
cmd({
    pattern: "fuck",
    alias: ["–≤—ã–µ–±–∞—Ç—å", "–≤—ã–µ–±–∞–ª"],
    desc: "–≤—ã–µ–±–∞—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 120,
    nsfw: true,
    react: "ü•µ",
}, async ({ Void, citel, users }) => {
    //-------–í–∫–ª/–í—ã–∫–ª
    const checkNSFW = await sck.findOne({ id: citel.chat });
    if (citel.isGroup && !checkNSFW.nsfw) return citel.reply(replies.nsfwDisabled());
    //-------–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    var bite = await fetchJson(`https://api.waifu.pics/nsfw/trap`);
    const response = await axios.get(bite.url, {
        responseType: "arraybuffer",
    });
    const buffer = Buffer.from(response.data, "utf-8");

    let gif = await GIFBufferToVideoBuffer(buffer);
    if (users) {
        let cap = `@${citel.sender.split("@")[0]} ${replies.viebat()} @${users.split("@")[0]} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [users, citel.sender], caption: cap }, { quoted: citel });
    } else {
        let cap = `@${citel.sender.split("@")[0]} ${replies.viebatSelf()} `;
        await Void.sendMessage(citel.chat, { video: gif, gifPlayback: true, mentions: [citel.sender], caption: cap }, { quoted: citel });
    }
})

cmd({
    pattern: "custom",
    alias: ["–∫–∞—Å—Ç–æ–º"],
    desc: "–∫–∞—Å—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏–µ",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 85,
}, async ({ Void, citel, text, users }) => {
    if (!text) return citel.reply(replies.notText({ text: 'custom' }))
    await Void.sendMessage(citel.chat, {
        text: `*@${citel.sender.split('@')[0]}* ${text} *@${users.split('@')[0]}*`,
        mentions: [citel.sender, users]
    }, { quoted: citel })
})

cmd({
    pattern: "me",
    alias: ["–º–∏", "—è"],
    desc: "–¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 1 –ª–∏—Ü–∞",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 80,
}, async ({ Void, citel, text, users }) => {
    if (!text) return citel.reply(replies.notText({ text: 'me' }))
    await Void.sendMessage(citel.chat, {
        text: `*@${citel.sender.split('@')[0]}* ${text}`,
        mentions: [citel.sender, users]
    }, { quoted: citel })
})

cmd({
    pattern: "do",
    alias: ["–¥—É", '–¥–µ–ª–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å'],
    desc: "–¥–µ–π—Å—Ç–∏–≤–µ –æ—Ç 3 –ª–∏—Ü–∞",
    category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
    priceMsg: 80,
}, async ({ Void, citel, text, users }) => {
    if (!text) return citel.reply(replies.notText({ text: 'do' }))
    await Void.sendMessage(citel.chat, {
        text: `${text} (*@${citel.sender.split('@')[0]}*)`,
        mentions: [citel.sender, users]
    }, { quoted: citel })
})