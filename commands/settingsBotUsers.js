const { cmd, sck, sck1, runAnimation, stopAnimation, sleep } = require('../lib');
const lastActionTimes = {};

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É 'setting' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
cmd({
    pattern: "setting",
    alias: ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"],
    desc: "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–≤–∫–ª –∫–æ–º–∞–Ω–¥, —Ñ—É–Ω–∫—Ü–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º —á—Ç–æ-—Ç–æ –µ—â–µ)",
    category: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
}, async ({ Void, citel, text }) => {
    if (!text) return citel.reply(replies.notText({ text: 'setting' }));

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    const handleCase = async (settingType, action) => {
        const user = await sck1.findOne({ id: citel.sender });
        const checkgroup = await sck.findOne({ id: citel.chat });

        switch (action) {
            case '–≤–∫–ª':
            case 'act':
                switch (settingType) {
                    case 'antilink':
                    case '–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞':
                        if (checkgroup?.antilink) return Void.sendMessage(citel.chat, { text: replies.act({ status: 'alreadyActAntilink' }) });

                        const { reactions: actAntilinkReactions, msg: actAntilinkMsg } = await Void.waitForReaction(citel, {
                            replic: "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã 14 —É—Ä–æ–≤–Ω–µ–π, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é -> üëç",
                            priceLvl: 14, react: 'üëç', time: 15000
                        });

                        if (actAntilinkReactions) {
                            if (!checkgroup) {
                                await new sck({ id: citel.chat, antilink: true }).save();
                            } else {
                                await sck.updateOne({ id: citel.chat }, { antilink: true });
                            }
                            Void.sendMessage(citel.chat, { text: replies.act({ status: 'actAntilink', priceLvl: 14, senderLvl: user.level }), edit: actAntilinkMsg.key });
                        }
                        break;

                    case 'events':
                    case '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                        if (checkgroup?.events) return Void.sendMessage(citel.chat, { text: replies.act({ status: 'alreadyActEvents' }) });

                        const { reactions: actEventsReactions, msg: actEventsMsg } = await Void.waitForReaction(citel, {
                            replic: "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã 10 —É—Ä–æ–≤–Ω–µ–π, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é -> üëç",
                            priceLvl: 10, react: 'üëç', time: 15000
                        });

                        if (actEventsReactions) {
                            if (!checkgroup) {
                                await new sck({ id: citel.chat, events: true }).save();
                            } else {
                                await sck.updateOne({ id: citel.chat }, { events: true });
                            }
                            Void.sendMessage(citel.chat, { text: replies.act({ status: 'actEvents', priceLvl: 10, senderLvl: user.level }), edit: actEventsMsg.key });
                        }
                        break;

                    case 'nsfw':
                    case '–Ω—Å—Ñ–≤':
                        if (!checkgroup) {
                            await new sck({ id: citel.chat, nsfw: true }).save();
                            citel.reply(replies.act({ status: 'actNsfw' }));
                        } else if (!checkgroup.nsfw) {
                            await sck.updateOne({ id: citel.chat }, { nsfw: true });
                            citel.reply(replies.act({ status: 'actNsfw' }));
                        } else {
                            citel.reply(replies.act({ status: 'alreadyActNsfw' }));
                        }
                        break;

                    case 'visible valute':
                    case '–≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç–∞':
                        if (user.visibleValute) {
                            citel.reply(replies.visibleValute('alreadyAct'));
                        } else {
                            await sck1.updateOne({ id: citel.sender }, { visibleValute: true });
                            citel.reply(replies.visibleValute('act'));
                        }
                        break;

                    case 'bot chat':
                    case '–±–æ—Ç —á–∞—Ç':
                        const groupMetadata = await Void.groupMetadata(citel.chat);
                        if (citel.sender !== groupMetadata.owner) return citel.reply("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã !");

                        if (!checkgroup) {
                            await new sck({ id: citel.chat, botenable: "true" }).save();
                        } else if (checkgroup.botenable !== "true") {
                            await sck.updateOne({ id: citel.chat }, { botenable: "true" });
                        } else {
                            return citel.reply(replies.botStatus({ status: 'alreadyON' }));
                        }
                        citel.reply(replies.botStatus({ status: 'on' }));
                        break;

                    case 'adminswitch':
                        if (user.infoRoleUsers.status === 'VIP') {
                            if (checkgroup?.removeAdminSwitch) {
                                citel.reply('adminsWitch - —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                            } else {
                                await sck.updateOne({ id: citel.chat }, { removeAdminSwitch: true });
                                citel.reply('adminsWitch - —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                            }
                        } else {
                            citel.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–¥—Ä–æ–±–Ω–µ–µ - .donate vip 1');
                        }
                        break;

                    default:
                        citel.reply('Error: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä');
                }
                break;

            case '–≤—ã–∫–ª':
            case 'deact':
                switch (settingType) {
                    case 'antilink':
                    case '–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞':
                        if (!checkgroup) {
                            await new sck({ id: citel.chat, antilink: false }).save();
                            citel.reply(replies.deact({ status: 'deactAntilink' }));
                        } else if (checkgroup.antilink) {
                            await sck.updateOne({ id: citel.chat }, { antilink: false });
                            citel.reply(replies.deact({ status: 'deactAntilink' }));
                        } else {
                            citel.reply(replies.deact({ status: 'alreadyDeactAntilink' }));
                        }
                        break;

                    case 'events':
                    case '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                        if (!checkgroup) {
                            await new sck({ id: citel.chat, events: false }).save();
                            citel.reply(replies.deact({ status: 'deactEvents' }));
                        } else if (checkgroup.events) {
                            await sck.updateOne({ id: citel.chat }, { events: false });
                            citel.reply(replies.deact({ status: 'deactEvents' }));
                        } else {
                            citel.reply(replies.deact({ status: 'alreadyDeactEvents' }));
                        }
                        break;

                    case 'nsfw':
                    case '–Ω—Å—Ñ–≤':
                        if (!checkgroup || !checkgroup.nsfw) return citel.reply('NSFW –£–∂–µ –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

                        const { reactions: deactNsfwReactions, msg: deactNsfwMsg } = await Void.waitForReaction(citel, {
                            replic: "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã 5 —É—Ä–æ–≤–Ω–µ–π, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é -> üëç",
                            priceLvl: 5, react: 'üëç', time: 15000
                        });

                        if (deactNsfwReactions) {
                            await sck.updateOne({ id: citel.chat }, { nsfw: false });
                            Void.sendMessage(citel.chat, { text: replies.deact({ status: 'deactNsfw', priceLvl: 5, senderMsg: user.level }), edit: deactNsfwMsg.key });
                        }
                        break;

                    case 'visible valute':
                    case '–≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç–∞':
                        if (!user.visibleValute) {
                            citel.reply(replies.visibleValute('alreadyDeact'));
                        } else {
                            await sck1.updateOne({ id: citel.sender }, { visibleValute: false });
                            citel.reply(replies.visibleValute('deact'));
                        }
                        break;

                    case 'bot chat':
                    case '–±–æ—Ç —á–∞—Ç':
                        const groupMetadataDeact = await Void.groupMetadata(citel.chat);
                        if (citel.sender !== groupMetadataDeact.owner) return citel.reply("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã !");

                        if (!checkgroup) {
                            await new sck({ id: citel.chat, botenable: "false" }).save();
                        } else if (checkgroup.botenable !== "false") {
                            await sck.updateOne({ id: citel.chat }, { botenable: "false" });
                        } else {
                            return citel.reply(replies.botStatus({ status: 'alreadyOFF' }));
                        }
                        citel.reply(replies.botStatus({ status: 'off' }));
                        break;

                    case 'adminswitch':
                        if (user.infoRoleUsers.status === 'VIP') {
                            if (!checkgroup?.removeAdminSwitch) {
                                citel.reply('adminsWitch - —É–∂–µ –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                            } else {
                                await sck.updateOne({ id: citel.chat }, { removeAdminSwitch: false });
                                citel.reply('adminsWitch - —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                            }
                        } else {
                            citel.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–¥—Ä–æ–±–Ω–µ–µ - .donate vip 1');
                        }
                        break;

                    default:
                        citel.reply('Error: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä');
                }
                break;

            case "—É–¥–∞–ª–∏—Ç—å":
            case "delete":
                if (user && (settingType === 'account' || settingType === '–∞–∫–∫–∞—É–Ω—Ç')) {
                    const senderId = citel.sender;
                    const lastActionTime = lastActionTimes[senderId] || 0;
                    const currentTime = Date.now();
                    const minInterval = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

                    if (currentTime - lastActionTime < minInterval) return;

                    lastActionTimes[senderId] = currentTime;
                    const { reactions: deleteReactions, msg: deleteMsg } = await Void.waitForReaction(citel, {
                        replic: "‚ùó –í–ù–ò–ú–ê–ù–ò–ï\n\n> –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–º–Ω–∏—Ç–µ! –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞–∫-–ª–∏–±–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π. –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ!!!\n\n> –ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é —Ä–µ–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                        delafexec: true, time: 72000
                    });

                    if (deleteReactions) {
                        await sck1.deleteOne({ id: senderId });
                        runAnimation(citel);
                        await sleep(14000);
                        stopAnimation();
                        await citel.react('‚úÖ');
                        await Void.sendMessage(citel.sender, {
                            text: `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏, —É–¥–∞—á–∫–∏.\n\nP.s –ê–∫–∫–∞—É–Ω—Ç(–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º) —Å id - ${senderId}, –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö RUSeck inc. –ü–æ–∫–∞(`
                        }, { quoted: citel });
                    }
                }
                break;

            default:
                citel.reply('Error: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        }
    };

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    const processCommand = async () => {
        const commandParts = text.split(" ");
        const action = commandParts[0];
        const settingType = commandParts.slice(1).join(" ").toLowerCase();

        await handleCase(settingType, action);
    };

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ setImmediate –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    setImmediate(processCommand);
});