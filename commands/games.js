const eco = require('../lib/economyFunction/msgFunc.js')
const { cmd, sck1, marrynaxoi } = require("../lib/");
cmd({
  pattern: "delttt",
  alias: ["—É–¥–∞–ª–∏—Ç—å–∫–Ω"],
  desc: "—É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∫—Ä–µ—Å—Ç–∏–∫–∏ - –Ω–æ–ª–∏–∫–∏",
  priceMsg: "—Å—Ç–∞–≤–∫–∞",
  category: "üéÆ –ò–≥—Ä—ã"
}, async ({ Void, citel, text, }) => {
  const brak = await marrynaxoi.findOne({ id: citel.sender })
  if (brak.status === 'registered') return

  if (citel.isGroup) {
    const groupMetadata = await Void.groupMetadata(citel.chat).catch(() => { });
    const groupBlocked = '120363144082211816@g.us';
    if (groupMetadata && groupMetadata.id === groupBlocked) return citel.reply(replies.groupBlocked(groupBlocked));
  }

  this.game = this.game || {};
  const room = Object.values(this.game).find((room) =>
    room.id.startsWith("tictactoe") && room.x === citel.chat
  );

  if (room) {
    if (room.state === "PLAYING") {
      const { reactions, msg } = await Void.waitForReaction(citel, { priceMsg: room.stawka, react: 'üëç', time: 15000 });
      if (reactions) {
        delete this.game[room.id];
        await Void.sendMessage(citel.chat, { text: replies.games({ status: 'delGame', val: room.stawka }), edit: msg.key });
      }
    } else {
      await Void.sendMessage(citel.chat, { text: replies.games({ status: 'delGameNotPrice', val: room.stawka }) });
      delete this.game[room.id];
    }
  } else {
    await Void.sendMessage(citel.chat, { text: replies.games({ status: 'notGame' }) });
  }
});


cmd({
  pattern: "ttt",
  alias: ["–∫–Ω"],
  category: "üéÆ –ò–≥—Ä—ã",
  desc: "–∫—Ä–µ—Å—Ç–∏–∫–∏ - –Ω–æ–ª–∏–∫–∏",
  priceMsg: "—Å—Ç–∞–≤–∫–∞"
}, async ({ Void, citel, text }) => {
  const brak = await marrynaxoi.findOne({ id: citel.sender })
  if (brak.status === 'registered') return
  const groupMetadata = citel.isGroup ? await Void.groupMetadata(citel.chat).catch((e) => { }) : "";
  if (groupMetadata && groupMetadata.id == '120363144082211816@g.us') return await Void.sendMessage(citel.chat, {
    text: "@120363210551136268@g.us",
    contextInfo: {
      groupMentions: [
        {
          groupJid: "120363210551136268@g.us",
          groupSubject: "–ö–æ–∫–æ–∫–æ –ø—É–ø—Å–∏–∫, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–∏–≥—Ä–∞—Ç—å –≤ DKill –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞. (–¢—ã–∫–∞–π)"
        }
      ]
    }
  }, { quoted: citel })

  let TicTacToe = require("../lib/ttt");
  this.game = this.game ? this.game : {};

  const existingGame = Object.values(this.game).find(room => room.state === "PLAYING" && room.o === citel.chat);
  const existingPlayerXO = Object.values(this.game).find(room =>
    room.game.playerO === citel.sender || room.game.playerX === citel.sender
  );

  if (existingGame) return citel.reply("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞..");
  if (existingPlayerXO) return citel.reply("–î–æ–∏–≥—Ä–∞–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é...");

  let stawka = parseInt(text.split(' ')[0]);
  if (!stawka || stawka <= 0) return citel.reply(replies.notText({ text: 'ttt' }))

  const user = await sck1.findOne({ id: citel.sender })
  if (user.msg < stawka) return citel.reply(replies.insufficientBalance(stawka, user.msg));

  let room = Object.values(this.game).find(
    (room) =>
      room.state === "WAITING" && (text ? room.name === text : true)
  );

  if (!room) {
    const { reactions, msg } = await Void.waitForReaction(citel, { replic: '*‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*\n\n> –°—Ç–∞–≤—è –ª—é–±—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ *—É –≤–∞—Å –∑–∞–±–µ—Ä—É—Ç —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ MSG, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤ —Å—Ç–∞–≤–∫–µ –∏ –æ—Ç–¥–∞–¥—É—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –≤—ã–∏–≥—Ä–∞–µ—Ç–µ.*', time: 17500 })
    if (!reactions || reactions && room) return

    room = {
      id: "tictactoe-" + +new Date(),
      x: citel.chat,
      o: "",
      game: new TicTacToe(citel.sender, "o"),
      state: "WAITING",
      stawka: stawka
    };
    if (text) room.name = text;
    await Void.sendMessage(citel.chat, { text: replies.games({ status: "waiting", val: stawka }), edit: msg.key });
    this.game[room.id] = room;
  } else {
    const { reactions, msg } = await Void.waitForReaction(citel, { replic: `*‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*\n\n> –°—Ç–∞–≤—è —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π —Å —Å—Ç–∞–≤–∫–æ–π ${stawka} MSG. *–ù–∞ –≤—Ä–µ–º—è –∏–≥—Ä—ã —É –≤–∞—Å –±—É–¥–µ—Ç —É–±—Ä–∞–Ω–æ —Å—Ç–æ–ª—å–∫–æ MSG, —Å–∫–æ–ª—å–∫–æ –≤ —Å—Ç–∞–≤–∫–µ.*` })
    if (!reactions) return

    room.stawka = stawka;
    room.o = citel.chat;
    room.game.playerO = citel.sender || citel.mentionedJid[0]
    room.state = "PLAYING";
    let arr = room.game.render().map((v) => {
      return {
        X: "‚ùå",
        O: "‚≠ï",
        1: "1Ô∏è‚É£",
        2: "2Ô∏è‚É£",
        3: "3Ô∏è‚É£",
        4: "4Ô∏è‚É£",
        5: "5Ô∏è‚É£",
        6: "6Ô∏è‚É£",
        7: "7Ô∏è‚É£",
        8: "8Ô∏è‚É£",
        9: "9Ô∏è‚É£",
      }[v];
    });
    let str = `${arr.slice(0, 3).join("  ")}\n${arr.slice(3, 6).join("  ")}\n${arr.slice(6).join("  ")}\n\n*–°—Ç–∞–≤–∫–∞:* ${stawka}\n*–•–æ–¥–∏—Ç:* ${["‚ùå", "‚≠ï"][1 * room.game._currentTurn]}\n`;
    str += `‚≠ï: @${room.game.playerO.split("@")[0]}\n`;
    str += `‚ùå: @${room.game.playerX.split("@")[0]}`;
    eco.takeMsg({ jid: room.game.playerO, amount: room.stawka, reason: "–ò–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏" })
    eco.takeMsg({ jid: room.game.playerX, amount: room.stawka, reason: "–ò–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏" })

    await Void.sendMessage(citel.chat, {
      text: str,
      headerType: 4,
      contextInfo: {
        externalAdReply: {
          title: '–ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏',
          body: `ID - ${room.id}`,
          thumbnailUrl: 'https://fonoteka.top/uploads/posts/2021-05/1621901174_4-phonoteka_org-p-fon-dlya-igri-krestiki-noliki-4.jpg',
          sourceUrl: `https://wa.me/+${OWNERNUM}`
        },
      },
      mentions: [room.game.playerO, room.game.playerX],
      edit: msg.key
    });
  }
});

cmd({
  on: "text",
  isGroup: true
}, async ({ Void, citel, text }) => {
  this.game = this.game ? this.game : {};
  let room = Object.values(this.game).find(
    (room) =>
      room.id &&
      room.game &&
      room.state &&
      room.id.startsWith("tictactoe") &&
      [room.game.playerX, room.game.playerO].includes(citel.sender) &&
      room.state == "PLAYING"
  );

  if (room) {
    let ok;
    let isWin = !1;
    let isTie = !1;
    let isSurrender = !1;

    if (!/^([1-9]|(me)?give_up|surr?ender)$/i.test(citel.text)) return;

    if (
      !isSurrender &&
      1 >
      (ok = room.game.turn(
        citel.sender === room.game.playerO,
        parseInt(citel.text) - 1
      ))
    ) {
      citel.reply(
        {
          "-3": "–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.",
          "-2": "–û—à–∏–±–∫–∞(–°–µ–π—á–∞—Å —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)",
          "-1": "_–û—à–∏–±–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è_",
          0: "_–û—à–∏–±–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è_",
        }[ok]
      );
      return !0;
    }
    if (citel.sender === room.game.winner) isWin = true;
    else if (room.game.board === 511) isTie = true;
    let arr = room.game.render().map((v) => {
      return {
        X: "‚ùå",
        O: "‚≠ï",
        1: "1Ô∏è‚É£",
        2: "2Ô∏è‚É£",
        3: "3Ô∏è‚É£",
        4: "4Ô∏è‚É£",
        5: "5Ô∏è‚É£",
        6: "6Ô∏è‚É£",
        7: "7Ô∏è‚É£",
        8: "8Ô∏è‚É£",
        9: "9Ô∏è‚É£",
      }[v];
    });
    if (isSurrender) {
      room.game._currentTurn = citel.sender === room.game.playerX;
      isWin = true;
    }
    let winner = isSurrender ? room.game.currentTurn : room.game.winner;
    if (isWin) {
      eco.giveMsg({ jid: winner, amount: room.stawka * 2, reason: "–í—ã–∏–≥—Ä—ã—à –≤ –∫—Ä–µ—Å—Ç–∏–∫–∞—Ö –Ω–æ–ª–∏–∫–∞—Ö" })
    }
    let str = ``;

    str += arr.slice(0, 3).join("  ") + "\n";
    str += arr.slice(3, 6).join("  ") + "\n";
    str += arr.slice(6).join("  ") + "\n\n";
    str += `*–°—Ç–∞–≤–∫–∞:* ${room.stawka}\n`;

    str += isWin ?
      `@${winner.split("@")[0]} –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, ${room.stawka * 2} MSG - —Ç–≤–æ–∏ ü§ë\n` :
      isTie ?
        `–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤ –Ω–∏—á—å—é (–ù–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç)\n` :
        `*–•–æ–¥–∏—Ç:* ${["‚ùå", "‚≠ï"][1 * room.game._currentTurn]}\n`;

    str += `‚≠ï: @${room.game.playerO.split("@")[0]}\n`;
    str += `‚ùå: @${room.game.playerX.split("@")[0]}`;

    if ((room.game._currentTurn ^ isSurrender ? room.x : room.o) !== citel.chat)
      room[room.game._currentTurn ^ isSurrender ? "x" : "o"] = citel.chat;
    if (isWin || isTie) {
      await Void.sendMessage(citel.chat, {
        text: str,
        headerType: 4,
        contextInfo: {
          externalAdReply: {
            title: '–ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏',
            body: `ID - ${room.id}`,
            thumbnailUrl: 'https://fonoteka.top/uploads/posts/2021-05/1621901174_4-phonoteka_org-p-fon-dlya-igri-krestiki-noliki-4.jpg',
            sourceUrl: `https://wa.me/+${OWNERNUM}`
          },
        },
        mentions: [room.game.playerO, room.game.playerX],
      });
    } else {
      await Void.sendMessage(citel.chat, {
        text: str,
        headerType: 4,
        contextInfo: {
          externalAdReply: {
            title: '–ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏',
            body: `ID - ${room.id}`,
            thumbnailUrl: 'https://fonoteka.top/uploads/posts/2021-05/1621901174_4-phonoteka_org-p-fon-dlya-igri-krestiki-noliki-4.jpg',
            sourceUrl: `https://wa.me/+${OWNERNUM}`
          },
        },
        mentions: [room.game.playerO, room.game.playerX],
      });
    }
    if (isTie || isWin) {
      delete this.game[room.id];
    }
  }
});

cmd({
  pattern: "ship",
  alias: ["—à–∏–ø"],
  desc: "—à–∏–ø–ø–µ—Ä",
  category: 'üé≠ –î–µ–π—Å—Ç–≤–∏—è',
  isGroup: true,
  priceMsg: 10,
}, async ({ Void, citel, text, users }) => {
  const groupMetadata = citel.isGroup ? await Void.groupMetadata(citel.chat).catch((e) => { }) : "";
  const participants = citel.isGroup ? await groupMetadata.participants : "";
  let members = participants.map(u => u.id)
  const percentage = Math.floor(Math.random() * 100)
  async function couple(percent) {
    var text = replies.textShip({ status: 'percent', percent: percent })
    return text
  }
  var shiper;
  if (users) {
    shiper = users
  } else {
    shiper = members[Math.floor(Math.random() * members.length)]
  }
  let caption = replies.textShip({ status: 'check', sender: '@' + citel.sender.split('@')[0], shiper: '@' + shiper.split('@')[0], couple: await couple(percentage) })

  if (citel.sender.split('@')[0] === shiper.split('@')[0]) return citel.reply(replies.textShip({ status: 'sender' }))
  await Void.sendMessage(citel.chat, { text: caption, mentions: [citel.sender, shiper] }, { quoted: citel })
})